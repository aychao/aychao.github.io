{"meta":{"title":"aychao","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"About","date":"2022-05-21T07:21:50.399Z","updated":"2022-05-21T07:21:50.399Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2022-05-21T07:21:50.412Z","updated":"2022-05-21T07:21:50.412Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2022-05-21T07:21:50.403Z","updated":"2022-05-21T07:21:50.403Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"JAVA常见异常","date":"2022-12-30T02:58:54.907Z","updated":"2022-12-30T02:58:54.907Z","comments":true,"path":"2022/12/30/JAVA常见异常/","link":"","permalink":"http://example.com/2022/12/30/JAVA%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/","excerpt":"","text":"JAVA常见异常Java.io.NullPointerException null 空的，不存在的 NullPointer 空指针 空指针异常，该异常出现在我们操作某个对象的属性或方法时，如果该对象是null时引发。 12String str = null;str.length();//空指针异常 上述代码中引用类型变量str的值为null，此时不能通过它调用字符串的方法或引用属性，否则就会引发空指针异常。 解决办法: 找到为什么赋值为null，确保该对象的值不能为null再操作属性或方法即可。 java.lang.NumberFormatException: For input string: “xxxxx” Number 数字 Format 格式 数字格式异常，该异常通常出现在我们使用包装类将一个字符串解析为对应的基本类型时引发。 123String line = &quot;123.123&quot;;//小数不能转换为整数!int d = Integer.parseInt(line);//抛出异常NumberFormatExceptionSystem.out.println(d); 上述代码中由于line的字符串内容是”123.123”.而这个数字是不能通过包装类Integer解析为一个整数因此出现该异常。注:非数字的字符出在解析时也会出现该异常。 解决办法: 确保解析的字符串正确表达了基本类型可以保存的值 123String line = &quot;123&quot;;int d = Integer.parseInt(line);System.out.println(d);//123 java.lang.StringIndexOutOfBoundsException index 索引，下标 Bounds 边界 OutOfBounds 超出了边界 字符串下标越界异常。该异常通常出现在String对应的方法中，当我们指定的下标小于0或者大于等于字符串的长度时会抛出该异常。 123String str = &quot;thinking in java&quot;;char c = str.charAt(20);//出现异常System.out.println(c); 解决办法: 指定下标时的范围应当在&gt;&#x3D;0并且&lt;&#x3D;字符串的长度。 java.io.InvalidClassException Invalid 无效的 Class 类 无效的类异常，该异常出现在使用java.io.ObjectInputStream在进行对象反序列化时在readObject()方法中抛出。这通常是因为反序列化的对象版本号与该对象所属类现有的版本号不一致导致的。 可以通过在类上使用常量: 1static final long serialVersionUID = 1L; 来固定版本号，这样序列化的对象就可以进行反序列化了。 JAVA建议我们实现Serializable接口的类主动定义序列化版本号,若不定义编译器会在编译时根据当前类结构生成版本号,但弊端是只要这个类内容发生了改变,那么再次编译时版本号就会改变,直接的后果就是之前序列化的对象都无法再进行反序列化. 如果自行定义版本号,那么可以在改变类内容的同时不改变版本号,这样一来,反序列化以前的对象时对象输入流会采取兼容模式,即:当前类的属性在反序列化的对象中还存在的则直接还原,不存在的就是用该属性的默认值 出现该异常的解决办法: 首先使用上述常量固定版本号 重新序列化对象(将对象通过ObjectOutputStream重新序列化并写出) 再进行反序列化即可 需要注意，之前没有定义序列化版本号时序列化后的对象都无法再反序列化回来，所以若写入了文件，可将之前的那些文件都删除，避免读取即可。 java.io.NotSerializableException NotSerializable 不能序列化 不能序列化异常，该异常通常出现在我们使用java.io.ObjectOutputStream进行对象序列化(调用writeObject)时。原因时序列化的对象所属的类没有实现java.io.Serializable接口导致 出现该异常的解决办法: 将序列化的类实现该接口即可 java.io.UnsupportedEncodingException Unsupported 不支持的 Encoding字符集 不支持的字符集异常，该异常通常出现在使用字符串形式指定字符集名字时，犹豫字符集名字拼写错误导致。例如 1PrintWriter pw = new PrintWriter(&quot;pw.txt&quot;, &quot;UFT-8&quot;); 上述代码中，字符集拼写成”UFT-8”就是拼写错误。 常见的字符集名字: GBK:我国的国标编码，其中英文1个字节，中文2字节 UTF-8:unicode的传输编码，也称为万国码。其中英文1字节，中文3字节。 ISO8859-1:欧中的字符集，不支持中文。 java.io.FileNotFoundException File 文件 NotFound 没有找到 文件没有找到异常，该异常通常出现在我们使用文件输入流读取指定路径对应的文件时出现 1FileInputStream fis = new FileInputStream(&quot;f1os.dat&quot;); 上述代码如果指定的文件f1os.dat文件不在当前目录下，就会引发该异常： java.io.FileNotFoundException: f1os.dat (系统找不到指定的文件。) 注: 抽象路径”f1os.dat”等同于”.&#x2F;f1os.dat”。因此该路径表示当前目录下应当有一个名为f1os.dat的文件。 还经常出现在文件输出流写出文件时，指定的路径无法将该文件创建出来时出现 1FileOutputStream fos = new FileOutputStream(&quot;./a/fos.dat&quot;); 上述代码中，如果当前目录下没有a目录，那么就无法在该目录下自动创建文件fos.dat，此时也会引发这个异常。 其他API上出现该异常通常也是上述类似的原因导致的。 解决办法: 在读取文件时，确保指定的路径正确，且文件名拼写正确。 在写出文件时，确保指定的文件所在的目录存在。 java.net.ConnectException: Connection refused: connect connection 连接 refused 拒绝 连接异常,连接被拒绝了.这通常是客户端在使用Socket与远端计算机建立连接时由于指定的地址或端口无效导致无法连接服务端引起的. 123System.out.println(&quot;正在连接服务端...&quot;);Socket socket = new Socket(&quot;localhost&quot;,8088);//这里可能引发异常System.out.println(&quot;与服务端建立连接!&quot;); 解决办法: 检查客户端实例化Socket时指定的地址和端口是否正常 客户端连接前,服务端是否已经启动了 java.net.BindException: Address already in use bind 绑定 address 地址 already 已经 Address already in use 地址已经被使用了 绑定异常,该异常通常是在创建ServerSocket时指定的服务端口已经被系统其他程序占用导致的. 123System.out.println(&quot;正在启动服务端...&quot;);ServerSocket serverSocket = new ServerSocket(8088);//这里可能引发异常System.out.println(&quot;服务端启动完毕&quot;); 解决办法: 有可能是重复启动了服务端导致的,先将之前启动的服务端关闭 找到该端口被占用的程序,将其进程结束 重新指定一个新的服务端口在重新启动服务端 java.net.SocketException: Connection reset socket 套接字 net 网络 reset 重置 套接字异常,链接重置。这个异常通常出现在Socket进行的TCP链接时，由于远端计算机异常断开(在没有调用socket.close()的之前直接结束了程序)导致的。 解决办法: 无论是客户端还是服务端当希望与另一端断开连接时，应当调用socket.close()方法，此时会进行TCP的挥手断开动作。 这个异常是无法完全避免的，因为无法保证程序在没有调用socket.close()前不被强制杀死。 java.lang.InterruptedException interrupt 中断 中断异常.这个异常通常在一个线程调用了会产生阻塞的方法处于阻塞的过程中,此时该线程的interrupt()方法被调用.那么阻塞方法会立即抛出中断异常并停止线程的阻塞使其继续运行. 例如: 1234try &#123; Thread.sleep(1000);&#125; catch (InterruptedException e) &#123;&#125; 如果线程t1调用Thread.sleep(1000)处于阻塞的过程中,其他线程调用了t1线程的inerrupt()方法,那么t1调用的sleep()方法就会立即抛出中断异常InterruptedException并停止阻塞. java.util.NoSuchElementException such 这个 Element 元素 没有这个元素的异常.该异常通常发生在使用迭代器Iterator遍历集合元素时由于没有先通过hasNext()方法判断存在下一个元素而贸然通过next()获取下一个元素时产生(当集合所有元素都经过迭代器遍历一遍后还使用next获取). 12345while(it.hasNext())&#123; String str = (String)it.next(); //这里就可能产生NoSuchException异常 System.out.println(it.next()); &#125; 上述代码中循环遍历时,每次调用hasNext()确定存在下一个元素时,循环里面连续调用过两次next()方法,这意味着第二次调用next()方法时并没有判断是否还存在.所以在最后会出现异常. 解决办法: 保证每次调用next()方法前都确定hasNext()为true才进行即可. java.util.ConcurrentModificationExceptionConcurrent 并发 Modification 修改 并发修改异常.这个异常也经常出现在使用迭代器遍历集合时产生. 当我们使用一个迭代器遍历集合的过程中,通过集合的方法增删元素时,迭代器会抛出该异常. 12345678while(it.hasNext())&#123; //出现ConcurrentModificationException String str = (String)it.next(); if(&quot;#&quot;.equals(str))&#123; c.remove(str);//遍历过程中不要通过集合方法增或删元素 &#125; System.out.println(str);&#125; 解决办法: 使用迭代器提供的remove()方法可以删除通过next()获取的元素. 12345678while(it.hasNext())&#123; String str = (String)it.next(); if(&quot;#&quot;.equals(str))&#123;// c.remove(str); it.remove(); &#125; System.out.println(str); &#125; java.lang.UnsupportedOperationExceptionsupport 支持 unsupported 不支持的 operation 操作 不支持的操作异常.该异常出现在很多的API中. 例如:常出现在我们对数组转换的集合进行增删元素操作时抛出. 123456789101112String[] array = &#123;&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;&#125;;System.out.println(&quot;array:&quot;+ Arrays.toString(array));List&lt;String&gt; list = Arrays.asList(array);//将数组转换为一个List集合System.out.println(&quot;list:&quot;+list);list.set(0,&quot;six&quot;);System.out.println(&quot;list:&quot;+list);//对该集合的操作就是对原数组的操作System.out.println(&quot;array:&quot;+ Arrays.toString(array));//由于数组是定长的,因此任何会改变数组长度的操作都是不支持的!list.add(&quot;seven&quot;);//UnsupportedOperationException java.lang.IllegalArgumentException: wrong number of argumentsIllegal 非法的 Argument 参数 wrong number of arguments 参数的数量有误 非法的参数异常.该异常出现在反射API中 例如:当我们用Method的invode方法反射调用一个有参方法，而指定的实参个数不符合时出现 123456789101112Person p = new Person();p.say(&quot;你好!&quot;);//实例化Class cls = Class.forName(&quot;reflect.Person&quot;);Object o = cls.newInstance();//调用方法//获取say(String,int)方法Method m = cls.getMethod(&quot;say&quot;,String.class,int.class);//m.invoke(o,&quot;嘿嘿&quot;);//反射调用时值传递了一个String参数，此时会抛出异常//正确写法m.invoke(o,&quot;嘿嘿&quot;,1);//需要传递第二个参数，该参数为一个int值。 java.lang.ClassNotFoundException: xxxx(包名).XXXXX(类名)ClassNotFound 类没有找到 类没有找到异常.该异常出现在反射API中 例如:当我们使用一个类的完全限定名使用Class.forName()加载这个类的类对象时，如果指定的完全限定名拼写有误会出现该异常 1234//加载reflect包中的类Person//Class cls = Class.forName(&quot;reflect.Person1&quot;);//完全限定名拼写错误会时出现异常//正确写法Class cls = Class.forName(&quot;reflect.Person&quot;); java.lang.NoSuchMethodExceptionNoSuchMethod 没有这个方法 没有这个方法异常，该异常通常出现在反射API中 例如:当我们通过类对象Class获取其表示的类中某个指定的方法时，如果指定的方法名错误或参数列表错误时会导致该异常的抛出: Person类定义: 1234567891011package reflect;public class Person &#123; public void say(String info)&#123; System.out.println(name+&quot;:&quot;+info); &#125; public void watchTV()&#123; System.out.println(name+&quot;看电视&quot;); &#125;&#125; 反射操作代码片段: 1234567//实例化Class cls = Class.forName(&quot;reflect.Person&quot;);//调用方法//Method m = cls.getMethod(&quot;says&quot;,String.class);//没有says(String)这个方法，导致报错//Method m = cls.getMethod(&quot;say&quot;,String.class,int.class);//参数列表错误，导致报错Method m = cls.getMethod(&quot;say&quot;,String.class);//正确","categories":[],"tags":[]},{"title":"Spark HA & Yarn配置","slug":"Spark HA & Yarn配置","date":"2022-05-22T03:06:37.000Z","updated":"2022-05-24T09:35:11.714Z","comments":true,"path":"2022/05/22/Spark HA & Yarn配置/","link":"","permalink":"http://example.com/2022/05/22/Spark%20HA%20&%20Yarn%E9%85%8D%E7%BD%AE/","excerpt":"","text":"一、Spark-Standalone-HA模式Spark Standalone集群是Master-Slaves架构的集群模式,和大部分的Master-Slaves结构集群一样,存在着Master 单点故障(SPOF)的问题。简单理解为，spark-Standalone 模式下为 master 节点控制其他节点，当 master 节点出现故障时，集群就不可用了。 spark-Standalone-HA 模式下master 节点不固定，当一个宕机时，立即换另一台为 master 保障不出现故障。 1.此处因为先前配置时的 zookeeper 版本和 spark 版本不太兼容，导致此模式有故障，需要重新下载配置新的版本的 zookeeper2.配置之前需要删除三台主机的 旧版 zookeeper 以及 对应的软连接3.在master节点上重新进行前面配置的 zookeeper 操作 12345678910上传apache-zookeeper-3.7.0-bin.tar.gz 到/export/server/目录下 并解压文件 在 /export/server 目录下创建软连接 进入 /export/server/zookeeper/conf/ 将 zoo_sample.cfg 文件复制为新文件 zoo.cfg 接上步给 zoo.cfg 添加内容 进入 /export/server/zookeeper/zkdatas 目录在此目录下创建 myid 文件，将 1 写入进 去将 master 节点中 /export/server/zookeeper-3.7.0 路径下内容推送给slave1 和 slave2 推送成功后，分别在 slave1 和 slave2 上创建软连接 接上步推送完成后将 slave1 和 slave2 的 /export/server/zookeeper/zkdatas/文件夹 下的 myid 中的内容分别改为 2 和 3 配置环境变量： 因先前配置 zookeeper 时候创建过软连接且以 ’zookeeper‘ 为路径，所以不用配置环境变量，此 处也是创建软连接的方便之处. 4.进入 &#x2F;export&#x2F;server&#x2F;spark&#x2F;conf 文件夹 修改 spark-env.sh 文件内容 123cd /export/server/spark/conf vim spark-env.sh 5.为 83 行内容加上注释，此部分原为指定 某台主机 做 master ，加上注释后即为 任何主机都可以做 master 12345结果显示： ...... 82 # 告知Spark的master运行在哪个机器上 83 # export SPARK_MASTER_HOST=master ......... 文末添加内容 123SPARK_DAEMON_JAVA_OPTS=&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER - # spark.deploy.recoveryMode 指定HA模式 基于Zookeeper实现Dspark.deploy.zookeeper.url=master:2181,slave1:2181,slave2:2181 - # 指定Zookeeper的连接地址Dspark.deploy.zookeeper.dir=/spark-ha&quot; # 指定在Zookeeper中注册临时节点的路径 6.分发 spark-env.sh 到 salve1 和 slave2 上 123scp spark-env.sh slave1:/export/server/spark/conf/ scp spark-env.sh slave2:/export/server/spark/conf/ 7.启动之前确保 Zookeeper 和 HDFS 均已经启动 启动集群: 1234567# 在 master 上 启动一个master 和全部worker /export/server/spark/sbin/start-all.sh # 注意, 下面命令在 slave1 上执行 启动 slave1 上的 master 做备用 master /export/server/spark/sbin/start-master.shjps #查看是否启动 8.访问 WebUI 界面 123http://master:8081/http://slave1:8082/ 9.此时 kill 掉 master 上的 master 假设 master 主机宕机掉 12# master主机 master 的进程号 kill -9 41589 10.访问 slave1 的 WebUI 1http://slave1:8082/ 11.进行主备切换的测试 提交一个 spark 任务到当前 活跃的 master上 : 123/export/server/spark/bin/spark-submit --master spark://master:7077 /export/server/spark/examples/src/main/python/pi.py 1000 12.复制标签 kill 掉 master 的 进程号 再次访问 master 的 WebUI 123http://master:8081/网页访问不了！ 13.再次访问 slave1 的 WebUI 1http://slave1:8082/ 14.可以看到当前活跃的 master 提示信息 123/export/server/spark/bin/spark-submit --master同样可以输出结果 当新的 master 接收集群后, 程序继续运行, 正常得到结果. 12结论 HA模式下, 主备切换 不会影响到正在运行的程序.最大的影响是 会让它中断大约30秒左右 二、Spark On YARN模式在已有YARN集群的前提下在单独准备Spark StandAlone集群,对资源的利用就不高.Spark On YARN, 无需部署Spark集群, 只要找一台服务器, 充当Spark的客户端 1.保证 HADOOP_CONF_和 DIR_YARN_CONF_DIR 已经配置在 spark-env.sh 和环境变量中 （注: 前面配置spark-Standlone 时已经配置过此项了） 123456spark-env.sh 文件部分显示：··· 77 ## HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群 78 HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoop 79 YARN_CONF_DIR=/export/server/hadoop/etc/hadoop···· 2.链接到 YARN 中（注: 交互式环境 pyspark 和 spark-shell 无法运行 cluster模式） 12345bin/pyspark --master yarn --deploy-mode client|cluster# --deploy-mode 选项是指定部署模式, 默认是 客户端模式 # client就是客户端模式 # cluster就是集群模式 # --deploy-mode 仅可以用在YARN模式下 1bin/spark-shell --master yarn --deploy-mode client|cluster 1bin/spark-submit --master yarn --deploy-mode client|cluster /xxx/xxx/xxx.py 参数 3.park-submit 和 spark-shell 和 pyspark的相关参数 123456- bin/pyspark: pyspark解释器spark环境 - bin/spark-shell: scala解释器spark环境 - bin/spark-submit: 提交jar包或Python文件执行的工具 - bin/spark-sql: sparksql客户端工具这4个客户端工具的参数基本通用.以spark-submit 为例: bin/spark-submit --master spark://master:7077 xxx.py 4.启动 YARN 的历史服务器 123cd /export/server/hadoop-3.3.0/sbin ./mr-jobhistory-daemon.sh start historyserver 5.访问WebUI界面 1http://master:19888/ client 模式测试 123SPARK_HOME=/export/server/spark $&#123;SPARK_HOME&#125;/bin/spark-submit --master yarn --deploy-mode client --driver-memory 512m --executor-memory 512m --num-executors 1 --total- executor-cores 2 $&#123;SPARK_HOME&#125;/examples/src/main/python/pi.py 3 cluster 模式测试 12345SPARK_HOME=/export/server/spark $&#123;SPARK_HOME&#125;/bin/spark-submit --master yarn --deploy-mode cluster --driver- memory 512m --executor-memory 512m --num-executors 1 --total-executor-cores 2 --conf &quot;spark.pyspark.driver.python=/root/anaconda3/bin/python3&quot; --conf &quot;spark.pyspark.python=/root/anaconda3/bin/python3&quot; $&#123;SPARK_HOME&#125;/examples/src/main/python/pi.py 3","categories":[],"tags":[]},{"title":"Spark-local& stand-alone配置","slug":"Spark local& stand-alone配置","date":"2022-05-22T03:06:37.000Z","updated":"2022-05-23T09:48:11.092Z","comments":true,"path":"2022/05/22/Spark local& stand-alone配置/","link":"","permalink":"http://example.com/2022/05/22/Spark%20local&%20stand-alone%E9%85%8D%E7%BD%AE/","excerpt":"","text":"一、Spark-local模式本地模式(单机) 本地模式就是以一个独立的进程,通过其内部的多个线程来模拟整个Spark运行时环境 Anaconda On Linux 安装 (单台服务器脚本安装) 1.安装上传安装包: 资料中提供的Anaconda3-2021.05-Linux-x86_64.sh文件到Linux服务器上安装位置在 &#x2F;export&#x2F;server: 1234cd /export/server# 运行文件sh Anaconda3-2021.05-Linux-x86_64.sh 123456789101112过程显示：···#出现内容选 yesPlease answer &#x27;yes&#x27; or &#x27;no&#x27;:&#x27; &gt;&gt;&gt; yes···# 出现添加路径：/export/server/anaconda3···[/root/anaconda3] &gt;&gt;&gt; /export/server/anaconda3 PREFIX=/export/server/anaconda3··· 2.安装完成后, 退出终端， 重新进来: 1exit 1234结果显示： #看到这个Base开头表明安装好了.base是默认的虚拟环境. Last login: Tue Mar 15 15:28:59 2022 from 192.168.88.1 (base) [root@master ~]# 3.在虚拟环境内安装包 （有WARNING不用管） 1pip install pyhive pyspark jieba -i https://pypi.tuna.tsinghua.edu.cn/simple 4.spark 安装 将文件上传到 &#x2F;export&#x2F;server 里面 ，解压 1234cd /export/server# 解压 tar -zxvf spark-3.2.0-bin-hadoop3.2.tgz -C /export/server/ 建立软连接 1ln -s /export/server/spark-3.2.0-bin-hadoop3.2 /export/server/spark 添加环境变量 SPARK_HOME: 表示Spark安装路径在哪里 PYSPARK_PYTHON: 表示Spark想运行Python程序, 那么去哪里找python执行器 JAVA_HOME: 告知Spark Java在哪里 HADOOP_CONF_DIR: 告知Spark Hadoop的配置文件在哪里 HADOOP_HOME: 告知Spark Hadoop安装在哪里 123456789101112131415161718192021222324252627vim /etc/profile内容：···注：此部分之前配置过，此部分不需要在配置#JAVA_HOME export JAVA_HOME=/export/server/jdk1.8.0_241 export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar#HADOOP_HOMEexport HADOOP_HOME=/export/server/hadoop-3.3.0 export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin#ZOOKEEPER_HOMEexport ZOOKEEPER_HOME=/export/server/zookeeper export PATH=$PATH:$ZOOKEEPER_HOME/bin·····#将以下部分添加进去#SPARK_HOME export SPARK_HOME=/export/server/spark#HADOOP_CONF_DIR export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop#PYSPARK_PYTHON export PYSPARK_PYTHON=/export/server/anaconda3/envs/pyspark/bin/python 1234567vim .bashrc内容添加进去：#JAVA_HOME export JAVA_HOME=/export/server/jdk1.8.0_241#PYSPARK_PYTHON export PYSPARK_PYTHON=/export/server/anaconda3/envs/pyspark/bin/python 5.重新加载环境变量文件 12source /etc/profile source ~/.bashrc\\ 进入 &#x2F;export&#x2F;server&#x2F;anaconda3&#x2F;envs&#x2F;pyspark&#x2F;bin&#x2F; 文件夹 1cd /export/server/anaconda3/envs/pyspark/bin/ 开启 1./pyspark 6.查看WebUI界面 12#浏览器访问：http://master:4040/ 退出 1conda deactivate 二、Spark-Standalone模式Standalone模式(集群) Spark中的各个角色以独立进程的形式存在,并组成Spark集群环境Anaconda On Linux 安装 (单台服务器脚本安装 注：在 slave1 和 slave2 上部署)1.安装上传安装包: 资料中提供的Anaconda3-2021.05-Linux-x86_64.sh文件到Linux服务器上安装位置在 &#x2F;export&#x2F;server: 1234cd /export/server# 运行文件 sh Anaconda3-2021.05-Linux-x86_64.sh 123456789101112过程显示： ... # 出现内容选 yes Please answer &#x27;yes&#x27; or &#x27;no&#x27;:&#x27; &gt;&gt;&gt; yes···# 出现添加路径：/export/server/anaconda3···[/root/anaconda3] &gt;&gt;&gt; /export/server/anaconda3 PREFIX=/export/server/anaconda3··· 2.安装完成后, 退出终端， 重新进来: 1exit 1234结果显示： # 看到这个Base开头表明安装好了.base是默认的虚拟环境. Last login: Tue Mar 15 15:28:59 2022 from 192.168.88.1 (base) [root@master ~]# 3.在 node1节点上把 .&#x2F;bashrc 和 profile 分发给 node2 和 node3 1234567#分发 .bashrc : scp ~/.bashrc root@node2:~/ scp ~/.bashrc root@node3:~/#分发 profile : scp /etc/profile/ root@node2:/etc/ scp /etc/profile/ root@node3:/etc/ 4.创建虚拟环境 pyspark 基于 python3.8 1conda create -n pyspark python=3.8 5.切换到虚拟环境内 12345conda activate pyspark结果显示： (base) [root@master ~]# conda activate pyspark (pyspark) [root@master ~]# 6.在虚拟环境内安装包 （有WARNING不用管） 1pip install pyhive pyspark jieba -i https://pypi.tuna.tsinghua.edu.cn/simple 7.master 节点节点进入 &#x2F;export&#x2F;server&#x2F;spark&#x2F;conf 修改以下配置文件 1cd /export/server/spark/conf 8.将文件 workers.template 改名为 workers，并配置文件内容 1234567mv workers.template workers# localhost删除，内容追加文末：node1node2node3# 功能: 这个文件就是指示了 当前SparkStandAlone环境下, 有哪些worker 9.将文件 spark-env.sh.template 改名为 spark-env.sh，并配置相关内容 1234567891011121314151617181920212223242526272829303132333435mv spark-env.sh.template spark-env.shvim spark-env.sh文末追加内容：##设置JAVA安装目录 JAVA_HOME=/export/server/jdk## HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群 HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoop YARN_CONF_DIR=/export/server/hadoop/etc/hadoop## 指定spark老大Master的IP和提交任务的通信端口 # 告知Spark的master运行在哪个机器上 export SPARK_MASTER_HOST=master # 告知sparkmaster的通讯端口 export SPARK_MASTER_PORT=7077 # 告知spark master的 webui端口 SPARK_MASTER_WEBUI_PORT=8080# worker cpu可用核数 SPARK_WORKER_CORES=1 # worker可用内存 SPARK_WORKER_MEMORY=1g # worker的工作通讯地址 SPARK_WORKER_PORT=7078 # worker的 webui地址 SPARK_WORKER_WEBUI_PORT=8081## 设置历史服务器 # 配置的意思是 将spark程序运行的历史日志 存到hdfs的/sparklog文件夹中 SPARK_HISTORY_OPTS=&quot;- Dspark.history.fs.logDirectory=hdfs://master:8020/sparklog/ - Dspark.history.fs.cleaner.enabled=true&quot; 10.开启 hadoop 的 hdfs 和 yarn 集群 123start-dfs.sh start-yarn.sh 11.在HDFS上创建程序运行历史记录存放的文件夹，同样 conf 文件目录下: 123hadoop fs -mkdir /sparklog hadoop fs -chmod 777 /sparklog 12.将 spark-defaults.conf.template 改为 spark-defaults.conf 并做相关配置 1234567891011mv spark-defaults.conf.template spark-defaults.conf vim spark-defaults.conf文末追加内容为： # 开启spark的日期记录功能 spark.eventLog.enabled true # 设置spark日志记录的路径 spark.eventLog.dir hdfs://master:8020/sparklog/ # 设置spark日志是否启动压缩 spark.eventLog.compress true 13.配置 log4j.properties 文件 将文件第 19 行的 log4j.rootCategory&#x3D;INFO, console 改为log4j.rootCategory&#x3D;WARN, console （即将INFO 改为 WARN 目的：输出日志, 设置级别为WARN 只输出警告和错误日志，INFO 则为输出所有信息，多数为无用信息） 123456789mv log4j.properties.template log4j.properties vim log4j.properties结果显示： ... 18 # Set everything to be logged to the console 19 log4j.rootCategory=WARN, console .... 14.node1节点分发 spark安装文件夹到node2和node3上 12345cd /export/server/scp -r /export/server/spark-3.2.0-bin-hadoop3.2/ node2:$PWD scp -r /export/server/spark-3.2.0-bin-hadoop3.2/ node3:$PWD 15.node 2和node3上做软连接 1ln -s /export/server/spark-3.2.0-bin-hadoop3.2 /export/server/spark 16.重新加载环境变量 1234567source /etc/profile进入 /export/server/spark/sbin 文件目录下 启动 start-history-server.shcd /export/server/spark/sbin ./start-history-server.sh 访问WebUI 界面 123浏览器访问： http://master:18080/ 18.启动Spark的Master和Worker进程 1234567891011121314# 启动全部master和worker sbin/start-all.sh # 或者可以一个个启动: # 启动当前机器的master sbin/start-master.sh # 启动当前机器的worker sbin/start-worker.sh# 停止全部 sbin/stop-all.sh # 停止当前机器的master sbin/stop-master.sh # 停止当前机器的worker sbin/stop-worker.sh 访问WebUI界面 123浏览器访问： http://master:8080/","categories":[],"tags":[]},{"title":"spark基础环境配置","slug":"“spark基础环境配置”","date":"2022-05-22T03:06:37.000Z","updated":"2022-05-23T03:02:50.295Z","comments":true,"path":"2022/05/22/“spark基础环境配置”/","link":"","permalink":"http://example.com/2022/05/22/%E2%80%9Cspark%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E2%80%9D/","excerpt":"","text":"一、基础环境配置1.编辑主机名（3台机器） 1vim /etc/hostname 2.Hosts映射（3台主机） 1vim /etc/hosts 3.关闭防火墙（3台机器） 12systemctl stop firewalld.service #关闭防火墙systemctl disable firewalld.service #禁止防火墙开启自启 4.设置ssh免密登录（node1执行-&gt;node1|node2|node3） 12ssh-keygen #4个回车生成公钥、私钥ssh-copy-id node1、ssh-copy-id node2、ssh-copy-id node3 5.集群时间同步（3台机器） 12yum-y install ntpdatentpdate ntp4.aliyun.com 6.创建统一工作目录（3台机器） 123mkdir -p /export/server/ #软件安装路径mkdir -p /export/data/ #数据存储路径mkdir -p /export/software/ #安装包存放路径 二、JDK安装1.编译环境软件安装目录 1mkdir-p /export/server/ 2.JDK1.8安装上传jdk-8u241-linux-x64.tar.gz到&#x2F;export&#x2F;server&#x2F;目录下并解压 1mkdir-p /export/server/ 3.配置环境变量 1234vim /etc/profile export JAVA_HOME=/export/server/jdk1.8.0_241export PATH=$PATH:$JAVA_HOME/binexport CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar 4.重新加载环境变量文件 1source /etc/profile 5.JDK配置后验证 1java -version 三、Hadoop安装配置1.解压上传文件（ hadoop-3.3.0-Centos7-64-with-snappy.tar.gz ）到&#x2F;export&#x2F;server&#x2F;目录下 1tar -zxvf hadoop-3.3.0-Centos7-64-with-snappy.tar.gz 2.修改配置文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122#修改hadoop-env.shcd /export/server/hadoop-3.3.0/etc/hadoopvim hadoop-env.sh #进入文件export JAVA_HOME=/export/server/jdk1.8.0_241 #文件最后添加export HDFS_NAMENODE_USER=rootexport HDFS_DATANODE_USER=rootexport HDFS_SECONDARYNAMENODE_USER=rootexport YARN_RESOURCEMANAGER_USER=rootexport YARN_NODEMANAGER_USER=root#修改core-site.xml&lt;设置默认使用的文件系统 Hadoop支持file、HDFS、GFS、ali|Amazon云等文件系统&gt;&lt;property&gt;&lt;name&gt;fs.defaultFS&lt;/name&gt;&lt;value&gt;hdfs://node1:8020&lt;/value&gt;&lt;/property&gt;&lt;设置Hadoop本地保存数据路径&gt;&lt;property&gt;&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;&lt;value&gt;/export/data/hadoop-3.3.0&lt;/value&gt;&lt;/property&gt;&lt;设置HDFS web UI用户身份&gt;&lt;property&gt;&lt;name&gt;hadoop.http.staticuser.user&lt;/name&gt;&lt;value&gt;root&lt;/value&gt;&lt;/property&gt;&lt;整合hive 用户代理设置&gt;hdfs-site.xmlmarpred-site.xml&lt;property&gt;&lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;&lt;value&gt;*&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;&lt;value&gt;*&lt;/value&gt;&lt;/property&gt;&lt;文件系统垃圾桶保存时间&gt;&lt;property&gt;&lt;name&gt;fs.trash.interval&lt;/name&gt;&lt;value&gt;1440&lt;/value&gt;&lt;/property&gt;#修改mapred-site.xml&lt; 设置MR程序默认运行模式： yarn集群模式 local本地模式&gt;&lt;property&gt;&lt;name&gt;mapreduce.framework.name&lt;/name&gt;&lt;value&gt;yarn&lt;/value&gt;&lt;/property&gt;&lt;MR程序历史服务地址&gt;&lt;property&gt;&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;&lt;value&gt;node1:10020&lt;/value&gt;&lt;/property&gt;&lt;MR程序历史服务器web端地址&gt;&lt;property&gt;&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt; &lt;value&gt;node1:19888&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt; &lt;value&gt;HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;mapreduce.map.env&lt;/name&gt; &lt;value&gt;HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;mapreduce.reduce.env&lt;/name&gt;yarn-site.xmlworkers&lt;分发同步hadoop安装包&gt; &lt;value&gt;HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;&lt;/value&gt;&lt;/property&gt;#修改yarn-site.xml&lt; 设置YARN集群主角色运行机器位置 &gt;&lt;property&gt; &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt; &lt;value&gt;node1&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt;&lt;/property&gt;&lt;是否将对容器实施物理内存限制&gt;&lt;property&gt; &lt;name&gt;yarn.nodemanager.pmem-check-enabled&lt;/name&gt; &lt;value&gt;false&lt;/value&gt;&lt;/property&gt;&lt;是否将对容器实施虚拟内存限制&gt;&lt;property&gt; &lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt; &lt;value&gt;false&lt;/value&gt;&lt;/property&gt;&lt;开启日志聚集&gt;&lt;property&gt; &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt; &lt;value&gt;true&lt;/value&gt;&lt;/property&gt;&lt;设置yarn历史服务器地址&gt;&lt;property&gt; &lt;name&gt;yarn.log.server.url&lt;/name&gt; &lt;value&gt;http://node1:19888/jobhistory/logs&lt;/value&gt;&lt;/property&gt;&lt;历史日志保存的时间 7天&gt;&lt;property&gt; &lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt; &lt;value&gt;604800&lt;/value&gt;&lt;/property&gt;#修改workerslocalhostnode1.itcast.cnnode2.itcast.cnnode3.itcast.cn#分发同步hadoop安装包cd /export/serverscp -r hadoop-3.3.0 root@node2:$PWDscp -r hadoop-3.3.0 root@node3:$PWD 3.将hadoop添加到环境变量 123vim /etc/profileexport HADOOP_HOME=/export/server/hadoop-3.3.0export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin 4.重新加载环境变量文件 1source /etc/profile 5.Hadoop集群启动 格式化namenode（只有首次启动需要格式化） 1hdfs namenode -forma 6.脚本一键启动 1start-all.sh 7.查看WEB页面 12 HDFS集群 :http://node1:9870/YARN集群 :http://node1:8088/ 四、Zookeeper安装配置1.配置主机名和IP的映射关系，修改 &#x2F;etc&#x2F;hosts 文件，添加 node1.root node2.root node3.root 12345678vim /etc/hosts#结果显示127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.88.135 node1 node1.root192.168.88.136 node2 node2.root192.168.88.137 node3 node3.root 2.zookeeper安装 上传 zookeeper-3.4.10.tar.gz到&#x2F;export&#x2F;server&#x2F;目录下 并解压文件 12cd /export/server/tar -zxvf zookeeper-3.4.10.tar.gz 3.在 &#x2F;export&#x2F;server 目录下创建软连接 12cd /export/serverln -s zookeeper-3.4.10/ zookeeper 4.cd进入 &#x2F;export&#x2F;server&#x2F;zookeeper&#x2F;conf&#x2F; 将 zoo_sample.cfg 文件复制为新文件 zoo.cfg 12cd /export/server/zookeeper/conf/ cp zoo_sample.cfg zoo.cfg 接上步给 zoo.cfg 添加内容 12345678910#Zookeeper的数据存放目录dataDir=/export/server/zookeeper/zkdatas# 保留多少个快照autopurge.snapRetainCount=3# 日志多少小时清理一次autopurge.purgeInterval=1# 集群中服务器地址server.1=node1:2888:3888server.2=node2:2888:3888server.3=node3:2888:3888 5.进入 &#x2F;export&#x2F;server&#x2F;zookeeper&#x2F;zkdatas 目录在此目录下创建 myid 文件，将 1 写入进去 123cd /export/server/zookeeper/zkdatatouch myidecho &#x27;1&#x27; &gt; myid 6.将 node1 节点中 &#x2F;export&#x2F;server&#x2F;zookeeper-3.4.10 路径下内容推送给node2 和 node3 12scp -r /export/server/zookeeper-3.4.10/ node2:$PWDscp -r /export/server/zookeeper-3.4.10/ node3:$PWD 7.推送成功后，分别在 node2 和 node3 上创建软连接 1ln -s zookeeper-3.4.10/ zookeeper 接上步推送完成后将 node2 和 node3 的 &#x2F;export&#x2F;server&#x2F;zookeeper&#x2F;zkdatas&#x2F; 文件夹下的 myid 中的内容分别改为 2 和 3 8.配置zookeeper的环境变量（注：三台主机都需要配置） 12345vim /etc/profile#zookeeper 环境变量export ZOOKEEPER_HOME=/export/server/zookeeperexport PATH=$PATH:$ZOOKEEPER_HOME/bin 9.重新加载环境变量文件 1source /etc/profile 10.进入 &#x2F;export&#x2F;server&#x2F;zookeeper&#x2F;bin&#x2F; 目录下启动 zkServer.sh 脚本 （注：三台都需要做） 12cd /export/server/zookeeper/bin/ zkServer.sh start 11.查看zookeeper是否开启 1jps","categories":[],"tags":[]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2022-05-21T06:57:06.000Z","updated":"2022-05-21T06:57:06.881Z","comments":true,"path":"2022/05/21/我的第一篇博客文章/","link":"","permalink":"http://example.com/2022/05/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-05-21T06:51:11.881Z","updated":"2022-05-21T06:51:11.882Z","comments":true,"path":"2022/05/21/hello-world/","link":"","permalink":"http://example.com/2022/05/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}